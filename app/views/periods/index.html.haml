=include_gon

-if @dados["period_number"] != [] && @dados["init_times"] != []
  = render "/periods/calendariosemanal"
  %hr
  = render "periods/subjectstable"

-elsif @dados["period_number"] != [] && @dados["subjects"] != []
  %h4.centertext= "Adicione os horários das disciplinas para visualizar o calendário"
  = render "periods/subjectstable"

-elsif @dados["period_number"] != []
  %h4.centertext= "Começe adicionando as disciplinas"
  %h4.centertext= link_to '<i class="glyphicon glyphicon-plus"></i> Adicionar disciplina'.html_safe, new_period_subject_path(@dados["period"]), class: 'btn btn-lg btn-primary'

-else
  %h5 Para comecar adicione um periodo
  = link_to "Criar periodo", new_period_path, class: "btn btn-small"

-#%button.btn.btn-info.btn-lg{"data-target" => "#PeriodModalForm", "data-toggle" => "modal", :type => "button"} Open Modal
-#=render "periods/modal"
/ Modal
-##myModal.modal.fade{:role => "dialog"}
  .modal-dialog
    / Modal content
    .modal-content
      .modal-header
        %button.close{"data-dismiss" => "modal", :type => "button"}
        %h4.modal-title Adicionar periodo
      .modal-body
        = bootstrap_form_for Period.new do |f|
          = f.date_field :init_date, label: 'Data inicial', required: true#,  as: :date_picker
          = f.date_field :final_date, label: 'Data final', required:true#, as: :date_picker
          = f.number_field :number, in: 1..20, label: 'Numero do periodo', required: true
          %button.btn.btn-primary{:type => "submit"} Salvar
      .modal-footer
        %button.btn.btn-default{"data-dismiss" => "modal", :type => "button"} Close
-#%button.btn.btn-info.btn-lg{"data-target" => "#SubjectModalForm", "data-toggle" => "modal", :type => "button"} Open Modal
-#=render "subjects/modal"

:javascript

  var subjectNames = new Array();
  var subjectGrades = new Array();
  var averageGrades = new Array();

  for(var i = 0; i < gon.subjects.length; i++){
    subjectNames.push(gon.subjects[i].name)
    if (gon.subjects[i].value == 0) {
      subjectGrades.push(gon.subjects[i].grade)
    } else {
      subjectGrades.push((100 * gon.subjects[i].grade)/gon.subjects[i].value)
    }
    averageGrades.push(60)
  };

  data = {
    labels : subjectNames,
    datasets : [
      {
        fillColor : "rgba(100,100,180,0.5)",
        strokeColor : "rgba(100,100,180,1)",
        pointColor : "rgba(100,100,180,1)",
        pointStrokeColor : "#fff",
        data : subjectGrades
      },
      {
        fillColor : "rgba(220,50,50,0.3)",
        strokeColor : "rgba(220,50,50,1)",
        pointColor : "rgba(220,50,50,1)",
        pointStrokeColor : "#fff",
        data : averageGrades
      }
    ]
  }

  var ctx = document.getElementById("canvas").getContext("2d");
  var pixelRatio = window.devicePixelRatio || 1;
  var width = $('canvas').parent().width();
  var height = $('canvas').parent().height();
  ctx.canvas.width = width / pixelRatio;
  ctx.canvas.height = (1.5 * height) / pixelRatio;
  var myNewChart = new Chart(ctx).Line(data);

  var options = {
    scaleOverride   : true,
    scaleSteps      : 10,
    scaleStepWidth  : 10,
    scaleStartValue : 0,
    datasetFill : false,
    //responsive: true,
    //maintainAspectRatio: true
  }

  new Chart(ctx).Line(data, options);
